require 'base64'
require 'json'
require 'openssl'
require 'zlib'

module Msf
  class Exploit
    class Remote
      module HTTP
        module FlaskUnsign
          # This module is a ruby implementation of https://github.com/Paradoxis/Flask-Unsign which can be used to
          # decode, and re-sign cookies

          def self.base64_encode(value)
            Base64.urlsafe_encode64(value).gsub(/=+$/, '')
          end

          class Signer
            def initialize(secret_key, salt)
              @secret_key = secret_key
              @salt = salt
            end

            def derive_key
              hmac = OpenSSL::HMAC.new(@secret_key, OpenSSL::Digest.new('SHA1'))
              hmac.update(@salt)
              hmac.digest
            end

            def get_signature(value)
              hmac = OpenSSL::HMAC.new(derive_key, OpenSSL::Digest.new('SHA1'))
              hmac.update(value)
              FlaskUnsign.base64_encode(hmac.digest)
            end
          end

          class TimestampSigner < Signer
            SEPARATOR = '.'

            def get_timestamp
              Time.now.to_f
            end

            def timestamp_to_datetime(ts)
              Time.at(ts)
            end

            def sign(value)
              timestamp = [get_timestamp].pack('Q>')
              timestamp.delete_prefix!("\x00") while timestamp.start_with?("\x00")
              timestamp = FlaskUnsign.base64_encode(timestamp)
              value = value + SEPARATOR + timestamp
              value + SEPARATOR + get_signature(value)
            end
          end

          module Session
            def self.decode(value)
              compressed = value.start_with?('.')
              value = value[1..] if compressed

              value = value.split('.', 2).first
              value = Base64.decode64(value)
              value = Zlib::Deflate.deflate(value) if compressed
              JSON.parse(value)
            end

            def self.sign(value, secret, salt: 'cookie-session')
              json = JSON.dump(value)
              signer = TimestampSigner.new(secret, salt)
              signer.sign(FlaskUnsign.base64_encode(json).strip)
            end
          end
        end
      end
    end
  end
end
